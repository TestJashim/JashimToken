// <auto-generated />
using System;
using JashimToken.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JashimToken.Migrations
{
    [DbContext(typeof(JashimTokenDbContext))]
    partial class JashimTokenDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("JashimToken.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            PasswordHash = new byte[] { 163, 222, 196, 35, 98, 150, 124, 43, 88, 164, 219, 220, 182, 48, 94, 186, 255, 168, 253, 203, 83, 42, 144, 28, 252, 254, 38, 179, 231, 237, 84, 101, 181, 39, 95, 46, 63, 121, 29, 111, 81, 88, 38, 97, 137, 31, 33, 21, 135, 247, 164, 124, 234, 102, 3, 12, 49, 195, 218, 218, 104, 250, 46, 222 },
                            PasswordSalt = new byte[] { 238, 35, 166, 121, 252, 251, 32, 153, 18, 55, 15, 161, 214, 154, 189, 118, 14, 148, 140, 146, 142, 97, 165, 83, 249, 252, 134, 116, 198, 43, 53, 245, 83, 239, 22, 124, 124, 182, 168, 234, 21, 177, 69, 50, 247, 181, 217, 30, 141, 204, 40, 184, 19, 229, 219, 87, 134, 118, 235, 129, 140, 145, 189, 126, 125, 50, 238, 165, 88, 109, 36, 98, 249, 150, 77, 200, 40, 69, 228, 213, 201, 144, 81, 109, 85, 118, 241, 232, 46, 240, 90, 131, 58, 22, 104, 229, 251, 90, 97, 24, 110, 190, 78, 238, 173, 76, 7, 205, 17, 67, 81, 122, 134, 59, 151, 133, 161, 180, 231, 192, 75, 183, 141, 236, 205, 133, 98, 74 },
                            Username = "Jashim"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
